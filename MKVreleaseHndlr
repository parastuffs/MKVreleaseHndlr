#!/usr/bin/env perl
use strict;
use warnings;
#use diagnostics;
use String::CRC32;
use File::Copy;

die("Usage: $0 -h\nThis will display the help screen.\n")
	if( !defined( $ARGV[0] ) );#where 1 is the last argument expected

#variables for parsing
my (@fonts, @videos, @scripts, $chapters, $group, $bluray, $season);
#others
my $episode = "";
my $anime = "";
my $res = "";
my $bit = "";
my @release;
my $LOCAL_FTP = "/srv/ftp/";
my @TRACKER_LIST = ("http://open.nyaatorrents.info:6544/announce");
sub display_help {
	my $s = "Usage: $0 [options]\nOptions:\n"; 
	$s = $s."-v vid1,vid2,...\tadding videos\n";
	$s = $s."-s script1,script2,...\tadding subtitles scripts\n";
	$s = $s."-c chaptersFile\t\tadding chapters\n";
	$s = $s."-f dir\t\t\tadding fonts directory\n";
	$s = $s."-b\t\t\tspecify if it's a blu-ray release\n";
	$s = $s."-g group\t\tspecify fansub group to tag in the release name\n";
	$s = $s."--season\t\tSeason of the show; will be appended right after the show name\n";
	$s = $s."-h\t\t\tdisplay this help\n";
	$s = $s."\nRequire 'mktorrent', 'mkvtoolnix' ('mkvmerge' & 'mkvinfo') and String::CRC32.\n";
	$s = $s."https://github.com/parastuffs/MKVreleaseHndlr\n";
	print $s;
	exit;
}

sub parse_arguments {
	my (@args) = @_;
	my $fontDir = "fonts";

	while (defined($args[-1])) {
#Subtitles
		if (defined($args[-2]) && $args[-2] eq "-s") {
			if($args[-1] =~ m/^\*/) {
				open(FD1,"ls $args[-1] |");
				@scripts = <FD1>;
				close(FD1);
				pop(@args);
				foreach my $l (@scripts) {
					chomp $l;
				}
			}
			else {
				@scripts = split(/,/,pop(@args));
			}
			pop(@args);
		}
#Videos
		elsif (defined($args[-2]) && $args[-2] eq "-v") {
			if($args[-1] =~ m/^\*/) {
				open(FD1,"ls $args[-1] |");
				@videos = <FD1>;
				close(FD1);
				pop(@args);
				foreach my $l (@videos) {
					chomp $l;
				}
			}
			else {
				@videos = split(/,/,pop(@args));
			}
			pop(@args);
		}
#Chapters
		elsif (defined($args[-2]) && $args[-2] eq "-c") {
			$chapters = pop(@args);
			pop(@args);
		}
#Fonts
		elsif (defined($args[-2]) && $args[-2] eq "-f") {
			my $fontArch = pop(@args);
			#Inflation
			if ($fontArch =~ /\.zip$/) {
				open(FD1, "unzip -d$fontDir $fontArch |");
				while(defined(my $l=<FD1>)) {
					print $l;
				}
				close(FD1);
			}
			#Get the fonts name in a list
			open(FD1, "ls $fontDir/ |");
			@fonts = <FD1>;
			foreach my $n (@fonts) {
				print $n;
				$n =~ s/\n//;
				$n = "$fontDir/\"$n\"";#quotes to circumvent problems with spaces
			}
			print @fonts;
			close(FD1);
			pop(@args);
		}
#Blu-Ray
		elsif ($args[-1] eq "-b") {
			$bluray = 1;
			pop(@args);
		}
#Fansub group
		elsif (defined($args[-2]) && $args[-2] eq "-g") {
			$group = pop(@args);
			pop(@args);
		}
#Season
		elsif (defined($args[-2]) && $args[-2] eq "--season") {
			$season = pop(@args);
			pop(@args);
		}
#Help
		elsif ($args[-1] eq "-h") {
			pop(@args);
			display_help;
		}
		else {
			print "None of the expected arguments has occured.\nPlease consult $0 -h to get help.\n";
			exit;
		}
	}
}

#The following should come from an external file
sub anime_recognition {
	my ($video) = @_;
	if ($video =~ m/[Dd]angan/) {
		return "Danganronpa_The_Animation";
	}
	elsif ($video =~ m/[Pp]sycho|pp[\d]/) {
		return "Psycho-Pass";
	}
	elsif ($video =~ m/[Nn]ichijou/) {
		return "Nichijou"
	}
	elsif ($video =~ m/[Dd]eath[_\- ][Pp]arade/) {
		return "Death_Parade";
	}
	elsif ($video =~ m/oretachi[i]/) {
		return "Ore-tachi_ni_Tsubasa_wa_Nai";
	}
	elsif ($video =~ m/[Oo]ne[_\ ][Pp]iece/) {
		return "One_Piece";
	}
	else {
		print "The name of the show wasn't recognized based on the video name.\nPlease enter it below as it should appear on the release name (ex: Danganronpa_The_Animation): ";
		my $in = <STDIN>;
		chop($in);
		return $in;
	}
}

sub episode_recognition {
	my ($video) = @_;
	if ($video =~ m/([\d][\d][\d]?)[^b]/) {
		return $1;;
	}
	else {
		print "Couldn't get a number out of the video provided.\nPlease enter the episode number: ";
		my $in = <STDIN>;
		chop($in);
		return $in;
	}
}

sub format_recognition {
	my ($video) = @_;
	my ($res, $bit);
	open(FD1,"mkvinfo $video |");
	while(defined(my $l = <FD1>)) {
		if($l =~ m/Pixel height|Hauteur \(pixels\)/) {
			$l =~ m/(: )(.+)/;
			$res = $2."p";
		}
	}
	if(!defined($res)) {
		print "Video: '$video'\n";
		print "The video definition couldn't be guessed out of the video provided.\nPlease enter it (720p or 1080p): ";
		$res = <STDIN>;
		$res =~ s/\t\r\n\f//g;
		chop($res);
	}

	if ($video =~ m/hi10|10b/) {
		$bit = "10bit";
	}
	elsif ($video =~ m/[^\d^W^\[]HD|8b|hd/) {
		$bit = "8bit";
	}
	else {
		print "The bit depth couldn't be guessed, please enter it (8bit ou 10bit): ";
		$bit = <STDIN>;
		$bit =~ s/\t\r\n\f\e//g;
		chop($bit);#removing the line ending (last character) due to the shell input
	}

	return ($res, $bit);
}

sub mux {
	my ($video, $refScripts, $chapters, $refFonts, $anime, $episode, $group, $bluray, $season) = @_;
	my @fonts = @$refFonts;
	my @scripts = @$refScripts;
	my ($res, $bit) = format_recognition($video);
	
	foreach my $f (@fonts) {
		$f = " --attach-file $f ";
	}
	my $attachments = join(" ",@fonts);
	foreach my $s (@scripts) {
		$s = " --language 0:fre --default-track 0 $s ";
	}
	my $subtitlesTracks = join(" ",@scripts);#Need to add a description to the track related to the type of track

	if(defined($chapters)) {
		$chapters = " --chapter-charset utf8 --chapter-language fre --chapters $chapters";
	}
	else {
		$chapters = "";
	}

	if(defined($bluray)) {
		$bluray = "BD";
	}
	else {
		$bluray = "";
	}

	my $releaseBaseName = "\[$group\] $anime $season - $episode $res $bluray $bit \[CRCSUMHERE\].mkv";
	$releaseBaseName =~ s/ +/_/g;

	print "A quick update: the name of the release being processed is '$releaseBaseName'\n";

	open(FD1,"mkvmerge -o \"$releaseBaseName\" --language 0:jpn --language 1:jpn $video $subtitlesTracks $chapters $attachments |");
	while(defined(my $l = <FD1>)) {
		print $l;
	}
	close(FD1);

	my $releaseName = $releaseBaseName;
	open(FD,$releaseName);
	my $crc = crc32(*FD);
	close(FD);
	$crc = uc sprintf('%08x',$crc);
	$releaseName =~ s/CRCSUMHERE/$crc/;

	rename("$releaseBaseName","$releaseName");

	return $releaseName;
}

sub makeTorrent {
	my ($file) = @_;
	if($file =~ m/\.mkv$/) {
		$file =~ m/(.+)(\.mkv)/;
		my $torrentName = "$1.torrent";
		my $trackers = join(",",@TRACKER_LIST);
		open(FD1,"mktorrent -v -a $trackers -o \"$torrentName\" \"$file\" |");
		while(defined(my $l = <FD1>)) {
			print $l;
		}
		close(FD1);
	
		if(defined($LOCAL_FTP) && $LOCAL_FTP ne "") {
			copy("$torrentName","$LOCAL_FTP");
		}
	}
	else {
		die "Error: The file provided to the torrent function is not an mkv video.\n"
	}
}

parse_arguments(@ARGV);
$anime = anime_recognition($videos[0]);
$episode = episode_recognition($videos[0]);
for (my $i=0;$i<@videos;$i++) {
	$release[$i] = mux($videos[$i], \@scripts, $chapters, \@fonts, $anime, $episode, $group, $bluray, $season);
	makeTorrent($release[$i]);
}


##TODO
#Add more details on what's going on and the various variables set.
#Maybe add a 'verbose' mode.
##
